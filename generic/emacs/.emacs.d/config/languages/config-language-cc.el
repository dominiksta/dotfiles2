(require 'cc-mode)
(require-and-log 'config-programming-general)
(require-and-log 'config-search)

;; ----------------------------------------------------------------------
;; lsp
;; ----------------------------------------------------------------------

;; There are several options for auto-completion for c/c++ in emacs. I am
;; currently using lsp-mode with clangd. Here are my thoughts on the
;; alternatives:
;; - rtags: No windows support
;; - ccls: Probably pretty good on linux, but requires manual compilation of
;;   llvm on windows. I could look into that in the future, but it's a ~30gb
;;   non-trivial build.
;; - irony: same problem as with ccls. less features but smaller codebase than
;;   ccls.
;; - company-clang: does not use clangd -> one has to manully set compiler flags
;; - cmake-ide: a meta-package for rtags, irony and company-clang. on windows,
;;   only company-clang is supported (theoretically, i have not
;;   tried). automatically generates a `compile_commands.json` IF the project is
;;   using a makefile generator. useless package for visual studio projects
;; - finally, clangd: this seems to be the only sane solution. it is easy to
;;   install with choco install -y llvm and seems to be decently fast. some
;;   additional setup is needed to get a compilation database though

;; Clangd (and other lsp-servers) require a `compilation_commands.json` file to
;; be present in the project root directory. This file should be generated by
;; the build system. For cmake-projects using a makefile generator, a parameter
;; for cmake does the trick.

;; For cmake-projects using visual studio generators (or any other visual studio
;; project), the only solution I found is to use the visual studio extension
;; "Sourcetrail Extension". With this extension, it is possible to generate a
;; `compile_commands.json` in "Extensions -> SourceTrail -> Create Compilation
;; Database".

;; Remember that a compilation database (aka `compile_commands.json`) has to be
;; created seperately for "shared" code (code in a different projectile
;; directory).

;; (config-add-external-dependency
;;  'clangd 'config-language-cc "lsp" (lambda () (executable-find "clangd"))
;;  "apt-get install -y clangd" "choco install -y llvm")


;; ----------------------------------------------------------------------
;; documentation
;; ----------------------------------------------------------------------
(defun fp/search-msdn (start end)
  (interactive "r")
  (fp/documentation-with-browser
   start end "https://social.msdn.microsoft.com/Search/en-US?query="))

(defun fp/search-cppreference (start end)
  (interactive "r")
  (fp/documentation-with-browser
   start end "http://en.cppreference.com/mwiki/index.php?&search="))

(evil-leader/set-key-for-mode 'c++-mode
  "mt" (lambda () (interactive) (ff-find-other-file nil 1))
  "msm" 'fp/search-msdn
  "msl" 'fp/search-cppreference)

(defun fp/cc-mode-hook ()
  (lsp)
  (flycheck-mode 0)
  (evil-local-set-key 'normal "gf" 'project-find-regexp)
  (evil-local-set-key 'normal "gf" 'project-find-regexp)
  (evil-local-set-key 'normal "gF" 'ff-find-other-file)
  )

(add-hook 'c-mode-hook 'fp/cc-mode-hook)
(add-hook 'c++-mode-hook 'fp/cc-mode-hook)


;; ----------------------------------------------------------------------
;; syntax
;; ----------------------------------------------------------------------

(setq-default c-basic-offset 4)

(add-hook 'c-mode-common-hook
          (lambda () (setq comment-start "// "
                      comment-end "")))

;; ----------------------------------------------------------------------
;; cmake
;; ----------------------------------------------------------------------
(straight-use-package 'cmake-mode)
(with-eval-after-load "cmake-mode"
  (add-hook 'cmake-mode-hook 'company-mode))

(provide 'config-language-cc)
